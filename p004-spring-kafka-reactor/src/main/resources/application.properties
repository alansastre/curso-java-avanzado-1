spring.application.name=p004-spring-kafka-reactor
# producer
spring.kafka.template.default-topic=topic-transactions
spring.kafka.producer.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.acks=all
spring.kafka.producer.retries=5
spring.kafka.producer.properties.retry.backoff.ms=150
# consumer
spring.kafka.consumer.bootstrap-servers=localhost:9092
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.group-id=group-transactions
spring.kafka.consumer.properties.spring.json.trusted.packages=*
# configurar cu√°ntos registros se reciben por lote:
# spring.kafka.consumer.properties.max.poll.records=50
# r2dbc
spring.sql.init.mode=always
spring.sql.init.schema-locations=classpath:schema.sql